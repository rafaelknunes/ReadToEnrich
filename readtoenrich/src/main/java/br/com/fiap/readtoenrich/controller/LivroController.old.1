package br.com.fiap.readtoenrich.controller;

import java.util.ArrayList;
import java.util.List;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import br.com.fiap.readtoenrich.model.Livro;

//@RestController: Esta anotação indica que a classe é um Controller, um componente do Spring que lida com requisições HTTP. Os dados de retorno são automaticamente escritos no corpo da resposta, não precisando de @ResponseBody.
@RestController
//@RequestMapping("livro"): Define a rota base para todos os métodos dentro desse Controller. Assim, todas as requisições para esse Controller começarão com /livro.
@RequestMapping("livro")
public class LivroController {

    // Esta linha inicializa uma instância de `Logger`, que é usada para registrar mensagens (logs), o que é crucial para depuração e monitoramento de aplicações.
    Logger log = LoggerFactory.getLogger(getClass());

    // Aqui temos uma simulação de um repositório (banco de dados), utilizando uma lista em memória para armazenar objetos `Livro`. Em um cenário real, provavelmente estaríamos injetando um repositório real aqui, possivelmente utilizando `@Autowired`.
    List<Livro> repository = new ArrayList<>();

    // Esta anotação indica que o método `getBookList()` será chamado quando uma requisição GET para `/livro/buscar` for feita. O método retorna uma lista de livros, que é o conteúdo atual do "repositório".
    @GetMapping("/buscar")
    public List<Livro> getBookList() {
        return repository;
    }

    // Anotação que indica que o método `create(@RequestBody Livro livro)` será chamado para tratar requisições POST em `/livro/cadastrar`. Este método é responsável por adicionar um novo `Livro` ao repositório.
    @PostMapping("/cadastrar")
    // `@RequestBody Livro livro`: Esta anotação indica que o parâmetro `livro` deve ser vinculado ao corpo da requisição. O Spring automaticamente converte o JSON do corpo da requisição em um objeto `Livro`.
    // Caso nenhum JSON seja enviado, o Spring retornará um erro 400 (Bad Request).
    public ResponseEntity<Livro> createBook(@RequestBody Livro livro) {
        // Verifica se o título do livro é nulo ou vazio
        if (livro.getTitulo() == null || livro.getTitulo().isEmpty()) {
            log.info("Falha ao cadastrar livro: título inválido");
            // Retorna uma resposta com o status 400 Bad Request
            return ResponseEntity
                    .status(HttpStatus.BAD_REQUEST)
                    .body(livro);
        }
        log.info("cadastrando livro: {}", livro);
        repository.add(livro);
        // `ResponseEntity.status(HttpStatus.CREATED).body(livro);`: Cria uma resposta HTTP com o status `201 Created`, incluindo o livro recém-criado no corpo da resposta.
        return ResponseEntity
                .status(HttpStatus.CREATED)
                .body(livro);
    }
}